;
; File generated by cc65 v 2.18 - Ubuntu 2.18-1
;
	.fopt		compiler,"cc65 v 2.18 - Ubuntu 2.18-1"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	on
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.dbg		file, "mandelbrot.c", 4103, 1615619520
	.dbg		file, "/usr/share/cc65/include/stdlib.h", 5748, 1573331006
	.dbg		file, "/usr/share/cc65/include/time.h", 5941, 1573331006
	.dbg		file, "/usr/share/cc65/include/conio.h", 8941, 1573331006
	.dbg		file, "/usr/share/cc65/include/stdarg.h", 2913, 1573331006
	.dbg		file, "/usr/share/cc65/include/target.h", 2992, 1573331006
	.dbg		file, "/usr/share/cc65/include/atari.h", 21597, 1573331006
	.dbg		file, "/usr/share/cc65/include/_atarios.h", 41120, 1573331006
	.dbg		file, "/usr/share/cc65/include/_gtia.h", 13839, 1573331006
	.dbg		file, "/usr/share/cc65/include/_pbi.h", 3143, 1573331006
	.dbg		file, "/usr/share/cc65/include/_pokey.h", 11387, 1573331006
	.dbg		file, "/usr/share/cc65/include/_pia.h", 3044, 1573331006
	.dbg		file, "/usr/share/cc65/include/_antic.h", 11828, 1573331006
	.dbg		file, "/usr/share/cc65/include/tgi.h", 10823, 1573331006
	.dbg		file, "/usr/share/cc65/include/tgi/tgi-error.h", 3568, 1573331006
	.dbg		file, "/usr/share/cc65/include/cc65.h", 5141, 1573331006
	.forceimport	__STARTUP__
	.dbg		sym, "abs", "00", extern, "_abs"
	.dbg		sym, "exit", "00", extern, "_exit"
	.dbg		sym, "_clocks_per_sec", "00", extern, "__clocks_per_sec"
	.dbg		sym, "clock", "00", extern, "_clock"
	.dbg		sym, "clrscr", "00", extern, "_clrscr"
	.dbg		sym, "cputs", "00", extern, "_cputs"
	.dbg		sym, "cprintf", "00", extern, "_cprintf"
	.dbg		sym, "cgetc", "00", extern, "_cgetc"
	.dbg		sym, "tgi_stddrv", "00", extern, "_tgi_stddrv"
	.dbg		sym, "tgi_load_driver", "00", extern, "_tgi_load_driver"
	.dbg		sym, "tgi_init", "00", extern, "_tgi_init"
	.dbg		sym, "tgi_done", "00", extern, "_tgi_done"
	.dbg		sym, "tgi_geterror", "00", extern, "_tgi_geterror"
	.dbg		sym, "tgi_geterrormsg", "00", extern, "_tgi_geterrormsg"
	.dbg		sym, "tgi_clear", "00", extern, "_tgi_clear"
	.dbg		sym, "tgi_getcolorcount", "00", extern, "_tgi_getcolorcount"
	.dbg		sym, "tgi_setcolor", "00", extern, "_tgi_setcolor"
	.dbg		sym, "tgi_getxres", "00", extern, "_tgi_getxres"
	.dbg		sym, "tgi_getyres", "00", extern, "_tgi_getyres"
	.dbg		sym, "tgi_setpixel", "00", extern, "_tgi_setpixel"
	.dbg		sym, "doesclrscrafterexit", "00", extern, "_doesclrscrafterexit"
	.import		_abs
	.import		_exit
	.import		__clocks_per_sec
	.import		_clock
	.import		_clrscr
	.import		_cputs
	.import		_cprintf
	.import		_cgetc
	.import		_tgi_stddrv
	.import		_tgi_load_driver
	.import		_tgi_init
	.import		_tgi_done
	.import		_tgi_geterror
	.import		_tgi_geterrormsg
	.import		_tgi_clear
	.import		_tgi_getcolorcount
	.import		_tgi_setcolor
	.import		_tgi_getxres
	.import		_tgi_getyres
	.import		_tgi_setpixel
	.import		_doesclrscrafterexit
	.export		_mandelbrot
	.export		_main

.segment	"RODATA"

L00B3:
	.byte	$45,$72,$72,$6F,$72,$20,$23,$25,$64,$20,$69,$6E,$69,$74,$69,$61
	.byte	$6C,$69,$7A,$69,$6E,$67,$20,$67,$72,$61,$70,$68,$69,$63,$73,$2E
	.byte	$0D,$9B,$25,$73,$0D,$9B,$00
L00E8:
	.byte	$50,$72,$65,$73,$73,$20,$61,$6E,$79,$20,$6B,$65,$79,$20,$77,$68
	.byte	$65,$6E,$20,$64,$6F,$6E,$65,$2E,$2E,$2E,$9B,$0D,$00
L00AA:
	.byte	$69,$6E,$69,$74,$69,$61,$6C,$69,$7A,$69,$6E,$67,$2E,$2E,$2E,$20
	.byte	$6D,$6F,$6D,$70,$6C,$73,$0D,$9B,$00
L00E1:
	.byte	$74,$69,$6D,$65,$20,$20,$3A,$20,$25,$6C,$75,$2E,$25,$75,$73,$9B
	.byte	$0D,$00
L00BE:
	.byte	$6F,$6B,$2E,$9B,$0D,$00

; ---------------------------------------------------------------
; void __near__ mandelbrot (signed short, signed short, signed short, signed short)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_mandelbrot: near

	.dbg	func, "mandelbrot", "00", extern, "_mandelbrot"
	.dbg	sym, "x1", "00", auto, 6
	.dbg	sym, "y1", "00", auto, 4
	.dbg	sym, "x2", "00", auto, 2
	.dbg	sym, "y2", "00", auto, 0
	.dbg	sym, "count", "00", register, "regbank", 5
	.dbg	sym, "r", "00", register, "regbank", 3
	.dbg	sym, "r1", "00", register, "regbank", 1
	.dbg	sym, "maxcol", "00", register, "regbank", 0

.segment	"BSS"

L0024:
	.res	2,$00
L0025:
	.res	2,$00
L0026:
	.res	2,$00
L0027:
	.res	2,$00
L0028:
	.res	2,$00
L0029:
	.res	2,$00
L002A:
	.res	2,$00

.segment	"CODE"

;
; {
;
	.dbg	line, "mandelbrot.c", 50
	jsr     pushax
;
; register unsigned char count;
;
	.dbg	line, "mandelbrot.c", 51
	lda     regbank+5
	jsr     pusha
;
; register signed short r, r1, i;
;
	.dbg	line, "mandelbrot.c", 52
	lda     regbank+3
	ldx     regbank+4
	jsr     pushax
	lda     regbank+1
	ldx     regbank+2
	jsr     pushax
;
; register unsigned char maxcol = MAXCOL;
;
	.dbg	line, "mandelbrot.c", 55
	lda     regbank+0
	jsr     pusha
	jsr     _tgi_getcolorcount
	sta     regbank+0
;
; xs = ((x2 - x1) / (SCREEN_X));
;
	.dbg	line, "mandelbrot.c", 58
	ldy     #$09
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sec
	ldy     #$0C
	sbc     (sp),y
	pha
	txa
	iny
	sbc     (sp),y
	tax
	pla
	jsr     pushax
	jsr     _tgi_getxres
	jsr     tosudivax
	sta     L0025
	stx     L0025+1
;
; ys = ((y2 - y1) / (SCREEN_Y));
;
	.dbg	line, "mandelbrot.c", 59
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sec
	ldy     #$0A
	sbc     (sp),y
	pha
	txa
	iny
	sbc     (sp),y
	tax
	pla
	jsr     pushax
	jsr     _tgi_getyres
	jsr     tosudivax
	sta     L0026
	stx     L0026+1
;
; yy = y1;
;
	.dbg	line, "mandelbrot.c", 61
	ldy     #$0B
	lda     (sp),y
	sta     L0028+1
	dey
	lda     (sp),y
	sta     L0028
;
; for (y = 0; y < (SCREEN_Y); y++) {
;
	.dbg	line, "mandelbrot.c", 62
	lda     #$00
	sta     L002A
	sta     L002A+1
L003B:	lda     L002A
	ldx     L002A+1
	jsr     pushax
	jsr     _tgi_getyres
	jsr     tosicmp
	jcs     L003C
;
; yy += ys;
;
	.dbg	line, "mandelbrot.c", 63
	lda     L0026
	clc
	adc     L0028
	sta     L0028
	lda     L0026+1
	adc     L0028+1
	sta     L0028+1
;
; xx = x1;
;
	.dbg	line, "mandelbrot.c", 64
	ldy     #$0D
	lda     (sp),y
	sta     L0027+1
	dey
	lda     (sp),y
	sta     L0027
;
; for (x = 0; x < (SCREEN_X); x++) {
;
	.dbg	line, "mandelbrot.c", 65
	lda     #$00
	sta     L0029
	sta     L0029+1
L004A:	lda     L0029
	ldx     L0029+1
	jsr     pushax
	jsr     _tgi_getxres
	jsr     tosicmp
	jcs     L003D
;
; xx += xs;
;
	.dbg	line, "mandelbrot.c", 66
	lda     L0025
	clc
	adc     L0027
	sta     L0027
	lda     L0025+1
	adc     L0027+1
	sta     L0027+1
;
; r = 0;
;
	.dbg	line, "mandelbrot.c", 68
	lda     #$00
	sta     regbank+3
	sta     regbank+3+1
;
; i = 0;
;
	.dbg	line, "mandelbrot.c", 69
	sta     L0024
	sta     L0024+1
;
; for (count = 0; (count < maxiterations) &&
;
	.dbg	line, "mandelbrot.c", 70
	sta     regbank+5
L00EE:	lda     regbank+5
	cmp     #$20
	jcs     L00F2
;
; (fpabs (r) < tofp (2)) && (fpabs (i) < tofp (2));
;
	.dbg	line, "mandelbrot.c", 71
	lda     regbank+3
	ldx     regbank+3+1
	jsr     _abs
	cmp     #$00
	txa
	sbc     #$08
	bvc     L006A
	eor     #$80
L006A:	asl     a
	jcc     L00F2
	lda     L0024
	ldx     L0024+1
	jsr     _abs
	cmp     #$00
	txa
	sbc     #$08
	bvc     L0071
	eor     #$80
L0071:	bmi     L005E
	jmp     L00F2
;
; r1 = (mulfp (r, r) - mulfp (i, i)) + xx;
;
	.dbg	line, "mandelbrot.c", 73
L005E:	lda     regbank+3
	ldx     regbank+3+1
	jsr     axlong
	jsr     pusheax
	lda     regbank+3
	ldx     regbank+3+1
	jsr     axlong
	jsr     tosmuleax
	txa
	ldx     sreg
	ldy     sreg+1
	sty     sreg
	cpy     #$80
	ldy     #$00
	bcc     L007C
	dey
L007C:	sty     sreg+1
	jsr     asreax2
	jsr     pusheax
	lda     L0024
	ldx     L0024+1
	jsr     axlong
	jsr     pusheax
	lda     L0024
	ldx     L0024+1
	jsr     axlong
	jsr     tosmuleax
	txa
	ldx     sreg
	ldy     sreg+1
	sty     sreg
	cpy     #$80
	ldy     #$00
	bcc     L0082
	dey
L0082:	sty     sreg+1
	jsr     asreax2
	jsr     tossubeax
	jsr     pusheax
	lda     L0027
	ldx     L0027+1
	jsr     axlong
	jsr     tosaddeax
	sta     regbank+1
	stx     regbank+1+1
;
; i = (((signed long) r * i) >> (fpshift - 1)) + yy;
;
	.dbg	line, "mandelbrot.c", 75
	lda     regbank+3
	ldx     regbank+3+1
	jsr     axlong
	jsr     pusheax
	lda     L0024
	ldx     L0024+1
	jsr     axlong
	jsr     tosmuleax
	txa
	ldx     sreg
	ldy     sreg+1
	sty     sreg
	cpy     #$80
	ldy     #$00
	bcc     L0089
	dey
L0089:	sty     sreg+1
	jsr     asreax1
	jsr     pusheax
	lda     L0028
	ldx     L0028+1
	jsr     axlong
	jsr     tosaddeax
	sta     L0024
	stx     L0024+1
;
; r = r1;
;
	.dbg	line, "mandelbrot.c", 76
	lda     regbank+1+1
	sta     regbank+3+1
	lda     regbank+1
	sta     regbank+3
;
; ++count) {
;
	.dbg	line, "mandelbrot.c", 72
	inc     regbank+5
	jmp     L00EE
;
; if (count == maxiterations) {
;
	.dbg	line, "mandelbrot.c", 78
L00F2:	lda     regbank+5
	cmp     #$20
	bne     L00F3
;
; tgi_setcolor (0);
;
	.dbg	line, "mandelbrot.c", 79
	lda     #$00
;
; } else {
;
	.dbg	line, "mandelbrot.c", 80
	jmp     L00ED
;
; switch (maxcol) {
;
	.dbg	line, "mandelbrot.c", 81
L00F3:	lda     regbank+0
;
; }
;
	.dbg	line, "mandelbrot.c", 90
	beq     L0099
	cmp     #$02
	bne     L00F4
;
; tgi_setcolor (1);
;
	.dbg	line, "mandelbrot.c", 83
	lda     #$01
;
; break;
;
	.dbg	line, "mandelbrot.c", 84
	jmp     L00ED
;
; tgi_setcolor (count);
;
	.dbg	line, "mandelbrot.c", 86
L0099:	lda     regbank+5
;
; break;
;
	.dbg	line, "mandelbrot.c", 87
	jmp     L00ED
;
; tgi_setcolor (count % maxcol);
;
	.dbg	line, "mandelbrot.c", 89
L00F4:	lda     regbank+5
	jsr     pusha0
	lda     regbank+0
	jsr     tosumoda0
L00ED:	jsr     _tgi_setcolor
;
; tgi_setpixel (x, y);
;
	.dbg	line, "mandelbrot.c", 93
	lda     L0029
	ldx     L0029+1
	jsr     pushax
	lda     L002A
	ldx     L002A+1
	jsr     _tgi_setpixel
;
; for (x = 0; x < (SCREEN_X); x++) {
;
	.dbg	line, "mandelbrot.c", 65
	lda     L0029
	ldx     L0029+1
	clc
	adc     #$01
	bcc     L0054
	inx
L0054:	sta     L0029
	stx     L0029+1
	jmp     L004A
;
; for (y = 0; y < (SCREEN_Y); y++) {
;
	.dbg	line, "mandelbrot.c", 62
L003D:	lda     L002A
	ldx     L002A+1
	clc
	adc     #$01
	bcc     L0045
	inx
L0045:	sta     L002A
	stx     L002A+1
	jmp     L003B
;
; }
;
	.dbg	line, "mandelbrot.c", 96
L003C:	ldy     #$00
L00A2:	lda     (sp),y
	sta     regbank+0,y
	iny
	cpy     #$06
	bne     L00A2
	ldy     #$0E
	jmp     addysp
	.dbg	line

.endproc

; ---------------------------------------------------------------
; int __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

	.dbg	func, "main", "00", extern, "_main"

.segment	"BSS"

L00A4:
	.res	4,$00
L00A5:
	.res	4,$00
L00A6:
	.res	2,$00
L00A7:
	.res	1,$00

.segment	"CODE"

;
; clrscr ();
;
	.dbg	line, "mandelbrot.c", 105
	jsr     _clrscr
;
; cprintf ("initializing... mompls\r\n");
;
	.dbg	line, "mandelbrot.c", 109
	lda     #<(L00AA)
	ldx     #>(L00AA)
	jsr     pushax
	ldy     #$02
	jsr     _cprintf
;
; tgi_load_driver (tgi_stddrv);
;
	.dbg	line, "mandelbrot.c", 110
	lda     #<(_tgi_stddrv)
	ldx     #>(_tgi_stddrv)
	jsr     _tgi_load_driver
;
; err = tgi_geterror ();
;
	.dbg	line, "mandelbrot.c", 115
	jsr     _tgi_geterror
	sta     L00A7
;
; if (err  != TGI_ERR_OK) {
;
	.dbg	line, "mandelbrot.c", 116
	lda     L00A7
	beq     L00B0
;
; cprintf ("Error #%d initializing graphics.\r\n%s\r\n",
;
	.dbg	line, "mandelbrot.c", 117
	lda     #<(L00B3)
	ldx     #>(L00B3)
	jsr     pushax
;
; err, tgi_geterrormsg (err));
;
	.dbg	line, "mandelbrot.c", 118
	lda     L00A7
	jsr     pusha0
	lda     L00A7
	jsr     _tgi_geterrormsg
	jsr     pushax
	ldy     #$06
	jsr     _cprintf
;
; if (doesclrscrafterexit ()) {
;
	.dbg	line, "mandelbrot.c", 119
	jsr     _doesclrscrafterexit
	tax
	beq     L00F5
;
; cgetc ();
;
	.dbg	line, "mandelbrot.c", 120
	jsr     _cgetc
;
; exit (EXIT_FAILURE);
;
	.dbg	line, "mandelbrot.c", 122
	ldx     #$00
L00F5:	lda     #$01
	jsr     _exit
;
; cprintf ("ok.\n\r");
;
	.dbg	line, "mandelbrot.c", 124
L00B0:	lda     #<(L00BE)
	ldx     #>(L00BE)
	jsr     pushax
	ldy     #$02
	jsr     _cprintf
;
; tgi_init ();
;
	.dbg	line, "mandelbrot.c", 127
	jsr     _tgi_init
;
; tgi_clear ();
;
	.dbg	line, "mandelbrot.c", 128
	jsr     _tgi_clear
;
; t = clock ();
;
	.dbg	line, "mandelbrot.c", 130
	jsr     _clock
	sta     L00A4
	stx     L00A4+1
	ldy     sreg
	sty     L00A4+2
	ldy     sreg+1
	sty     L00A4+3
;
; mandelbrot (tofp (-2), tofp (-2), tofp (2), tofp (2));
;
	.dbg	line, "mandelbrot.c", 133
	jsr     decsp6
	lda     #$00
	ldy     #$04
	sta     (sp),y
	iny
	lda     #$F8
	sta     (sp),y
	lda     #$00
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$F8
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	iny
	lda     #$08
	sta     (sp),y
	tax
	lda     #$00
	jsr     _mandelbrot
;
; t = clock () - t;
;
	.dbg	line, "mandelbrot.c", 135
	jsr     _clock
	jsr     pusheax
	lda     L00A4+3
	sta     sreg+1
	lda     L00A4+2
	sta     sreg
	ldx     L00A4+1
	lda     L00A4
	jsr     tossubeax
	sta     L00A4
	stx     L00A4+1
	ldy     sreg
	sty     L00A4+2
	ldy     sreg+1
	sty     L00A4+3
;
; cgetc ();
;
	.dbg	line, "mandelbrot.c", 138
	jsr     _cgetc
;
; tgi_done ();
;
	.dbg	line, "mandelbrot.c", 141
	jsr     _tgi_done
;
; sec = (t * 10) / CLK_TCK;
;
	.dbg	line, "mandelbrot.c", 144
	lda     L00A4+3
	sta     sreg+1
	lda     L00A4+2
	sta     sreg
	ldx     L00A4+1
	lda     L00A4
	jsr     pusheax
	ldx     #$00
	lda     #$0A
	jsr     tosumul0ax
	jsr     pusheax
	jsr     __clocks_per_sec
	jsr     tosudiv0ax
	sta     L00A5
	stx     L00A5+1
	ldy     sreg
	sty     L00A5+2
	ldy     sreg+1
	sty     L00A5+3
;
; sec10 = sec % 10;
;
	.dbg	line, "mandelbrot.c", 145
	lda     L00A5+3
	sta     sreg+1
	lda     L00A5+2
	sta     sreg
	ldx     L00A5+1
	lda     L00A5
	jsr     pusheax
	ldx     #$00
	lda     #$0A
	jsr     tosumod0ax
	sta     L00A6
	stx     L00A6+1
;
; sec /= 10;
;
	.dbg	line, "mandelbrot.c", 146
	lda     L00A5+3
	sta     sreg+1
	lda     L00A5+2
	sta     sreg
	ldx     L00A5+1
	lda     L00A5
	jsr     pusheax
	ldx     #$00
	lda     #$0A
	jsr     tosudiv0ax
	sta     L00A5
	stx     L00A5+1
	ldy     sreg
	sty     L00A5+2
	ldy     sreg+1
	sty     L00A5+3
;
; cprintf ("time  : %lu.%us\n\r", sec, sec10);
;
	.dbg	line, "mandelbrot.c", 149
	lda     #<(L00E1)
	ldx     #>(L00E1)
	jsr     pushax
	lda     L00A5+3
	sta     sreg+1
	lda     L00A5+2
	sta     sreg
	ldx     L00A5+1
	lda     L00A5
	jsr     pusheax
	lda     L00A6
	ldx     L00A6+1
	jsr     pushax
	ldy     #$08
	jsr     _cprintf
;
; if (doesclrscrafterexit ()) {
;
	.dbg	line, "mandelbrot.c", 151
	jsr     _doesclrscrafterexit
	tax
	beq     L00F7
;
; cputs ("Press any key when done...\n\r");
;
	.dbg	line, "mandelbrot.c", 153
	lda     #<(L00E8)
	ldx     #>(L00E8)
	jsr     _cputs
;
; cgetc ();
;
	.dbg	line, "mandelbrot.c", 154
	jsr     _cgetc
;
; return EXIT_SUCCESS;
;
	.dbg	line, "mandelbrot.c", 158
	ldx     #$00
	txa
;
; }
;
	.dbg	line, "mandelbrot.c", 159
L00F7:	rts
	.dbg	line

.endproc

