;
; File generated by cc65 v 2.18 - Ubuntu 2.18-1
;
	.fopt		compiler,"cc65 v 2.18 - Ubuntu 2.18-1"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	on
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.dbg		file, "multidemo.c", 6304, 1615619520
	.dbg		file, "/usr/share/cc65/include/string.h", 5104, 1573331006
	.dbg		file, "/usr/share/cc65/include/stddef.h", 3057, 1573331006
	.dbg		file, "/usr/share/cc65/include/stdio.h", 6189, 1573331006
	.dbg		file, "/usr/share/cc65/include/stdarg.h", 2913, 1573331006
	.dbg		file, "/usr/share/cc65/include/stdlib.h", 5748, 1573331006
	.dbg		file, "/usr/share/cc65/include/dirent.h", 5324, 1573331006
	.dbg		file, "/usr/share/cc65/include/em.h", 6288, 1573331006
	.dbg		file, "/usr/share/cc65/include/cc65.h", 5141, 1573331006
	.dbg		file, "/usr/share/cc65/include/fcntl.h", 3550, 1573331006
	.dbg		file, "/usr/share/cc65/include/unistd.h", 4309, 1573331006
	.forceimport	__STARTUP__
	.dbg		sym, "strcpy", "00", extern, "_strcpy"
	.dbg		sym, "strrchr", "00", extern, "_strrchr"
	.dbg		sym, "strcasecmp", "00", extern, "_strcasecmp"
	.dbg		sym, "getchar", "00", extern, "_getchar"
	.dbg		sym, "printf", "00", extern, "_printf"
	.dbg		sym, "realloc", "00", extern, "_realloc"
	.dbg		sym, "free", "00", extern, "_free"
	.dbg		sym, "opendir", "00", extern, "_opendir"
	.dbg		sym, "readdir", "00", extern, "_readdir"
	.dbg		sym, "closedir", "00", extern, "_closedir"
	.dbg		sym, "em_load_driver", "00", extern, "_em_load_driver"
	.dbg		sym, "em_pagecount", "00", extern, "_em_pagecount"
	.dbg		sym, "em_copyfrom", "00", extern, "_em_copyfrom"
	.dbg		sym, "em_copyto", "00", extern, "_em_copyto"
	.dbg		sym, "doesclrscrafterexit", "00", extern, "_doesclrscrafterexit"
	.dbg		sym, "open", "00", extern, "_open"
	.dbg		sym, "close", "00", extern, "_close"
	.dbg		sym, "read", "00", extern, "_read"
	.dbg		sym, "_OVERLAY1_LOAD__", "00", extern, "__OVERLAY1_LOAD__"
	.dbg		sym, "_OVERLAY1_SIZE__", "00", extern, "__OVERLAY1_SIZE__"
	.dbg		sym, "_OVERLAY2_LOAD__", "00", extern, "__OVERLAY2_LOAD__"
	.dbg		sym, "_OVERLAY2_SIZE__", "00", extern, "__OVERLAY2_SIZE__"
	.dbg		sym, "_OVERLAY3_LOAD__", "00", extern, "__OVERLAY3_LOAD__"
	.dbg		sym, "_OVERLAY3_SIZE__", "00", extern, "__OVERLAY3_SIZE__"
	.import		_strcpy
	.import		_strrchr
	.import		_strcasecmp
	.import		_getchar
	.import		_printf
	.import		_realloc
	.import		_free
	.import		_opendir
	.import		_readdir
	.import		_closedir
	.import		_em_load_driver
	.import		_em_pagecount
	.import		_em_copyfrom
	.import		_em_copyto
	.import		_doesclrscrafterexit
	.import		_open
	.import		_close
	.import		_read
	.import		__OVERLAY1_LOAD__
	.import		__OVERLAY1_SIZE__
	.import		__OVERLAY2_LOAD__
	.import		__OVERLAY2_SIZE__
	.import		__OVERLAY3_LOAD__
	.import		__OVERLAY3_SIZE__
	.export		_overlay
	.export		_log
	.export		_foo
	.export		_bar
	.export		_foobar
	.export		_loademdriver
	.export		_loadoverlay
	.export		_copyoverlays
	.export		_main

.segment	"DATA"

_overlay:
	.addr	L0002
	.word	$FFFF
	.addr	__OVERLAY1_LOAD__
	.addr	__OVERLAY1_SIZE__
	.addr	L0007
	.word	$FFFF
	.addr	__OVERLAY2_LOAD__
	.addr	__OVERLAY2_SIZE__
	.addr	L000C
	.word	$FFFF
	.addr	__OVERLAY3_LOAD__
	.addr	__OVERLAY3_SIZE__

.segment	"RODATA"

L00CC:
	.byte	$44,$62,$67,$3A,$20,$4E,$6F,$74,$20,$65,$6E,$6F,$75,$67,$68,$20
	.byte	$6D,$65,$6D,$6F,$72,$79,$20,$66,$6F,$72,$20,$6F,$76,$65,$72,$6C
	.byte	$61,$79,$20,$25,$75,$9B,$00
L00E7:
	.byte	$44,$62,$67,$3A,$20,$53,$74,$6F,$72,$65,$64,$20,$6F,$76,$65,$72
	.byte	$6C,$61,$79,$20,$25,$75,$20,$69,$6E,$20,$70,$61,$67,$65,$73,$20
	.byte	$25,$75,$2D,$25,$75,$9B,$00
L00A4:
	.byte	$44,$62,$67,$3A,$20,$4C,$6F,$61,$64,$69,$6E,$67,$20,$6F,$76,$65
	.byte	$72,$6C,$61,$79,$20,$25,$75,$20,$66,$72,$6F,$6D,$20,$6D,$65,$6D
	.byte	$6F,$72,$79,$9B,$00
L0087:
	.byte	$44,$62,$67,$3A,$20,$4C,$6F,$61,$64,$69,$6E,$67,$20,$6F,$76,$65
	.byte	$72,$6C,$61,$79,$20,$25,$75,$20,$66,$72,$6F,$6D,$20,$66,$69,$6C
	.byte	$65,$9B,$00
L00F6:
	.byte	$43,$6F,$70,$79,$69,$6E,$67,$20,$6F,$76,$65,$72,$6C,$61,$79,$73
	.byte	$20,$69,$6E,$74,$6F,$20,$65,$78,$74,$2E,$20,$6D,$65,$6D,$6F,$72
	.byte	$79,$00
L00FB:
	.byte	$4E,$6F,$20,$65,$78,$74,$65,$6E,$64,$65,$64,$20,$6D,$65,$6D,$6F
	.byte	$72,$79,$20,$64,$72,$69,$76,$65,$72,$20,$66,$6F,$75,$6E,$64,$00
L00F1:
	.byte	$4C,$6F,$61,$64,$69,$6E,$67,$20,$65,$78,$74,$65,$6E,$64,$65,$64
	.byte	$20,$6D,$65,$6D,$6F,$72,$79,$20,$64,$72,$69,$76,$65,$72,$00
L002C:
	.byte	$44,$62,$67,$3A,$20,$53,$65,$61,$72,$63,$68,$69,$6E,$67,$20,$66
	.byte	$6F,$72,$20,$65,$6D,$64,$72,$69,$76,$65,$72,$73,$9B,$00
L0025:
	.byte	$43,$61,$6C,$6C,$69,$6E,$67,$20,$6D,$61,$69,$6E,$20,$66,$72,$6F
	.byte	$6D,$20,$6F,$76,$65,$72,$6C,$61,$79,$20,$33,$00
L0019:
	.byte	$43,$61,$6C,$6C,$69,$6E,$67,$20,$6D,$61,$69,$6E,$20,$66,$72,$6F
	.byte	$6D,$20,$6F,$76,$65,$72,$6C,$61,$79,$20,$31,$00
L0113:
	.byte	$43,$61,$6C,$6C,$69,$6E,$67,$20,$6F,$76,$65,$72,$6C,$61,$79,$20
	.byte	$33,$20,$66,$72,$6F,$6D,$20,$6D,$61,$69,$6E,$00
L0094:
	.byte	$4F,$70,$65,$6E,$69,$6E,$67,$20,$6F,$76,$65,$72,$6C,$61,$79,$20
	.byte	$66,$69,$6C,$65,$20,$66,$61,$69,$6C,$65,$64,$00
L010C:
	.byte	$43,$61,$6C,$6C,$69,$6E,$67,$20,$6F,$76,$65,$72,$6C,$61,$79,$20
	.byte	$32,$20,$66,$72,$6F,$6D,$20,$6D,$61,$69,$6E,$00
L001F:
	.byte	$43,$61,$6C,$6C,$69,$6E,$67,$20,$6D,$61,$69,$6E,$20,$66,$72,$6F
	.byte	$6D,$20,$6F,$76,$65,$72,$6C,$61,$79,$20,$32,$00
L0105:
	.byte	$43,$61,$6C,$6C,$69,$6E,$67,$20,$6F,$76,$65,$72,$6C,$61,$79,$20
	.byte	$31,$20,$66,$72,$6F,$6D,$20,$6D,$61,$69,$6E,$00
L006D:
	.byte	$44,$62,$67,$3A,$20,$54,$72,$79,$69,$6E,$67,$20,$65,$6D,$64,$72
	.byte	$69,$76,$65,$72,$20,$25,$73,$9B,$00
L0074:
	.byte	$44,$62,$67,$3A,$20,$4C,$6F,$61,$64,$65,$64,$20,$65,$6D,$64,$72
	.byte	$69,$76,$65,$72,$20,$25,$73,$9B,$00
L007B:
	.byte	$44,$62,$67,$3A,$20,$45,$6D,$64,$72,$69,$76,$65,$72,$20,$25,$73
	.byte	$20,$66,$61,$69,$6C,$65,$64,$9B,$00
L0035:
	.byte	$4F,$70,$65,$6E,$69,$6E,$67,$20,$64,$69,$72,$65,$63,$74,$6F,$72
	.byte	$79,$20,$66,$61,$69,$6C,$65,$64,$00
L0051:
	.byte	$44,$62,$67,$3A,$20,$4D,$65,$6D,$6F,$72,$69,$7A,$69,$6E,$67,$20
	.byte	$66,$69,$6C,$65,$20,$25,$73,$9B,$00
L004D:
	.byte	$44,$62,$67,$3A,$20,$53,$6B,$69,$70,$70,$69,$6E,$67,$20,$66,$69
	.byte	$6C,$65,$20,$25,$73,$9B,$00
L00FE:
	.byte	$50,$72,$65,$73,$73,$20,$61,$6E,$79,$20,$6B,$65,$79,$2E,$2E,$2E
	.byte	$00
L0119	:=	L00FE+0
L0007:
	.byte	$6D,$75,$6C,$74,$64,$65,$6D,$6F,$2E,$32,$00
L000C:
	.byte	$6D,$75,$6C,$74,$64,$65,$6D,$6F,$2E,$33,$00
L0002:
	.byte	$6D,$75,$6C,$74,$64,$65,$6D,$6F,$2E,$31,$00
L0013:
	.byte	$4C,$6F,$67,$3A,$20,$25,$73,$9B,$00
L0049:
	.byte	$2E,$65,$6D,$64,$00
L0030	:=	L00FE+15

; ---------------------------------------------------------------
; void __near__ log (__near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_log: near

	.dbg	func, "log", "00", extern, "_log"
	.dbg	sym, "msg", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "multidemo.c", 53
	jsr     pushax
;
; printf ("Log: %s\n", msg);
;
	.dbg	line, "multidemo.c", 59
	lda     #<(L0013)
	ldx     #>(L0013)
	jsr     pushax
	ldy     #$05
	jsr     pushwysp
	ldy     #$04
	jsr     _printf
;
; }
;
	.dbg	line, "multidemo.c", 60
	jmp     incsp2
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ foo (void)
; ---------------------------------------------------------------

.segment	"OVERLAY1"

.proc	_foo: near

	.dbg	func, "foo", "00", extern, "_foo"

.segment	"OVERLAY1"

;
; log ("Calling main from overlay 1");
;
	.dbg	line, "multidemo.c", 71
	lda     #<(L0019)
	ldx     #>(L0019)
	jmp     _log
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ bar (void)
; ---------------------------------------------------------------

.segment	"OVERLAY2"

.proc	_bar: near

	.dbg	func, "bar", "00", extern, "_bar"

.segment	"OVERLAY2"

;
; log ("Calling main from overlay 2");
;
	.dbg	line, "multidemo.c", 81
	lda     #<(L001F)
	ldx     #>(L001F)
	jmp     _log
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ foobar (void)
; ---------------------------------------------------------------

.segment	"OVERLAY3"

.proc	_foobar: near

	.dbg	func, "foobar", "00", extern, "_foobar"

.segment	"OVERLAY3"

;
; log ("Calling main from overlay 3");
;
	.dbg	line, "multidemo.c", 91
	lda     #<(L0025)
	ldx     #>(L0025)
	jmp     _log
	.dbg	line

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ loademdriver (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_loademdriver: near

	.dbg	func, "loademdriver", "00", extern, "_loademdriver"
	.dbg	sym, "dir", "00", auto, -2
	.dbg	sym, "ent", "00", auto, -4
	.dbg	sym, "emd", "00", auto, -6
	.dbg	sym, "max", "00", auto, -7
	.dbg	sym, "num", "00", auto, -8

.segment	"CODE"

;
; char *emd = NULL;
;
	.dbg	line, "multidemo.c", 101
	jsr     decsp4
	jsr     push0
;
; unsigned char max = 0;
;
	.dbg	line, "multidemo.c", 102
	jsr     pusha
;
; printf ("Dbg: Searching for emdrivers\n");
;
	.dbg	line, "multidemo.c", 105
	jsr     decsp1
	lda     #<(L002C)
	ldx     #>(L002C)
	jsr     pushax
	ldy     #$02
	jsr     _printf
;
; dir = opendir (".");
;
	.dbg	line, "multidemo.c", 106
	lda     #<(L0030)
	ldx     #>(L0030)
	jsr     _opendir
	ldy     #$06
	jsr     staxysp
;
; if (!dir) {
;
	.dbg	line, "multidemo.c", 107
	ldy     #$07
	lda     (sp),y
	dey
	ora     (sp),y
	jne     L003A
;
; log ("Opening directory failed");
;
	.dbg	line, "multidemo.c", 108
	lda     #<(L0035)
	ldx     #>(L0035)
	jsr     _log
;
; return 0;
;
	.dbg	line, "multidemo.c", 109
	jmp     L011F
;
; if (!_DE_ISREG (ent->d_type)) {
;
	.dbg	line, "multidemo.c", 115
L0038:	jsr     decsp2
	ldy     #$07
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0D
	lda     (ptr1),y
	cmp     #$C4
	jsr     boolne
	tax
;
; continue;
;
	.dbg	line, "multidemo.c", 116
	jeq     L011D
;
; ext = strrchr (ent->d_name, '.');
;
	.dbg	line, "multidemo.c", 119
	ldy     #$09
	jsr     pushwysp
	ldx     #$00
	lda     #$2E
	jsr     _strrchr
	jsr     stax0sp
;
; if (!ext || strcasecmp (ext, ".emd")) {
;
	.dbg	line, "multidemo.c", 120
	ldy     #$01
	lda     (sp),y
	dey
	ora     (sp),y
	beq     L0047
	jsr     pushw0sp
	lda     #<(L0049)
	ldx     #>(L0049)
	jsr     _strcasecmp
	stx     tmp1
	ora     tmp1
	beq     L0046
;
; printf ("Dbg: Skipping file %s\n", ent->d_name);
;
	.dbg	line, "multidemo.c", 121
L0047:	lda     #<(L004D)
	ldx     #>(L004D)
	jsr     pushax
	ldy     #$0B
	jsr     pushwysp
	ldy     #$04
	jsr     _printf
;
; continue;
;
	.dbg	line, "multidemo.c", 122
	jmp     L011D
;
; printf ("Dbg: Memorizing file %s\n", ent->d_name);
;
	.dbg	line, "multidemo.c", 125
L0046:	lda     #<(L0051)
	ldx     #>(L0051)
	jsr     pushax
	ldy     #$0B
	jsr     pushwysp
	ldy     #$04
	jsr     _printf
;
; emd = realloc (emd, FILENAME_MAX * (max + 1));
;
	.dbg	line, "multidemo.c", 126
	ldy     #$07
	jsr     pushwysp
	ldy     #$05
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$01
	bcc     L005A
	inx
L005A:	jsr     pushax
	lda     #$0D
	jsr     tosumula0
	jsr     _realloc
	ldy     #$04
	jsr     staxysp
;
; strcpy (emd + FILENAME_MAX * max++, ent->d_name);
;
	.dbg	line, "multidemo.c", 127
	jsr     pushax
	ldy     #$05
	lda     (sp),y
	pha
	clc
	adc     #$01
	sta     (sp),y
	pla
	jsr     pusha0
	lda     #$0D
	jsr     tosumula0
	jsr     tosaddax
	jsr     pushax
	ldy     #$09
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _strcpy
;
; }
;
	.dbg	line, "multidemo.c", 128
L011D:	jsr     incsp2
;
; while (ent = readdir (dir)) {
;
	.dbg	line, "multidemo.c", 112
L003A:	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _readdir
	ldy     #$04
	jsr     staxysp
	stx     tmp1
	ora     tmp1
	jne     L0038
;
; closedir (dir);
;
	.dbg	line, "multidemo.c", 129
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _closedir
;
; for (num = 0; num < max; ++num) {
;
	.dbg	line, "multidemo.c", 131
	lda     #$00
	tay
L011E:	sta     (sp),y
	iny
	cmp     (sp),y
	jcs     L0062
;
; drv = emd + FILENAME_MAX * num;
;
	.dbg	line, "multidemo.c", 134
	jsr     decsp2
	ldy     #$07
	jsr     pushwysp
	ldy     #$04
	lda     (sp),y
	jsr     pusha0
	lda     #$0D
	jsr     tosumula0
	jsr     tosaddax
	jsr     stax0sp
;
; printf ("Dbg: Trying emdriver %s\n", drv);
;
	.dbg	line, "multidemo.c", 135
	lda     #<(L006D)
	ldx     #>(L006D)
	jsr     pushax
	ldy     #$05
	jsr     pushwysp
	ldy     #$04
	jsr     _printf
;
; if (em_load_driver (drv) == EM_ERR_OK) {
;
	.dbg	line, "multidemo.c", 136
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _em_load_driver
	cmp     #$00
	bne     L0070
;
; printf ("Dbg: Loaded emdriver %s\n", drv);
;
	.dbg	line, "multidemo.c", 137
	lda     #<(L0074)
	ldx     #>(L0074)
	jsr     pushax
	ldy     #$05
	jsr     pushwysp
	ldy     #$04
	jsr     _printf
;
; free (emd);
;
	.dbg	line, "multidemo.c", 138
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _free
;
; return 1;
;
	.dbg	line, "multidemo.c", 139
	ldx     #$00
	lda     #$01
	jsr     incsp2
	jmp     incsp8
;
; printf ("Dbg: Emdriver %s failed\n", drv);
;
	.dbg	line, "multidemo.c", 142
L0070:	lda     #<(L007B)
	ldx     #>(L007B)
	jsr     pushax
	ldy     #$05
	jsr     pushwysp
	ldy     #$04
	jsr     _printf
;
; }
;
	.dbg	line, "multidemo.c", 143
	jsr     incsp2
;
; for (num = 0; num < max; ++num) {
;
	.dbg	line, "multidemo.c", 131
	ldy     #$00
	clc
	lda     #$01
	adc     (sp),y
	jmp     L011E
;
; free (emd);
;
	.dbg	line, "multidemo.c", 145
L0062:	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _free
;
; return 0;
;
	.dbg	line, "multidemo.c", 146
L011F:	ldx     #$00
	txa
;
; }
;
	.dbg	line, "multidemo.c", 147
	jmp     incsp8
	.dbg	line

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ loadoverlay (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_loadoverlay: near

	.dbg	func, "loadoverlay", "00", extern, "_loadoverlay"
	.dbg	sym, "num", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "multidemo.c", 151
	jsr     pusha
;
; if (overlay[num - 1].page < 0) {
;
	.dbg	line, "multidemo.c", 152
	ldx     #$00
	lda     (sp,x)
	sec
	sbc     #$01
	bcs     L0085
	dex
L0085:	stx     tmp1
	asl     a
	rol     tmp1
	asl     a
	rol     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_overlay)
	sta     ptr1
	lda     tmp1
	adc     #>(_overlay)
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	tax
	cpx     #$80
	jcc     L0082
;
; printf ("Dbg: Loading overlay %u from file\n", num);
;
	.dbg	line, "multidemo.c", 157
	jsr     decsp2
	lda     #<(L0087)
	ldx     #>(L0087)
	jsr     pushax
	ldy     #$04
	lda     (sp),y
	jsr     pusha0
	ldy     #$04
	jsr     _printf
;
; file = open (overlay[num - 1].name, O_RDONLY);
;
	.dbg	line, "multidemo.c", 158
	jsr     decsp4
	ldy     #$06
	ldx     #$00
	lda     (sp),y
	sec
	sbc     #$01
	bcs     L008E
	dex
L008E:	stx     tmp1
	asl     a
	rol     tmp1
	asl     a
	rol     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_overlay)
	sta     ptr1
	lda     tmp1
	adc     #>(_overlay)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$01
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	ldy     #$04
	jsr     _open
	jsr     stax0sp
;
; if (file == -1) {
;
	.dbg	line, "multidemo.c", 159
	cpx     #$FF
	bne     L0090
	cmp     #$FF
	bne     L0090
;
; log ("Opening overlay file failed");
;
	.dbg	line, "multidemo.c", 160
	lda     #<(L0094)
	ldx     #>(L0094)
	jsr     _log
;
; return 0;
;
	.dbg	line, "multidemo.c", 161
	ldx     #$00
	txa
	jsr     incsp2
	jmp     incsp1
;
; read (file, overlay[num - 1].addr,
;
	.dbg	line, "multidemo.c", 163
L0090:	jsr     decsp4
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$06
	ldx     #$00
	lda     (sp),y
	sec
	sbc     #$01
	bcs     L009B
	dex
L009B:	stx     tmp1
	asl     a
	rol     tmp1
	asl     a
	rol     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_overlay)
	sta     ptr1
	lda     tmp1
	adc     #>(_overlay)
	sta     ptr1+1
	dey
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
;
; overlay[num - 1].size);
;
	.dbg	line, "multidemo.c", 164
	ldy     #$06
	ldx     #$00
	lda     (sp),y
	sec
	sbc     #$01
	bcs     L009E
	dex
L009E:	stx     tmp1
	asl     a
	rol     tmp1
	asl     a
	rol     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_overlay)
	sta     ptr1
	lda     tmp1
	adc     #>(_overlay)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _read
;
; close (file);
;
	.dbg	line, "multidemo.c", 165
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _close
;
; return 1;
;
	.dbg	line, "multidemo.c", 175
	ldx     #$00
	lda     #$01
	jsr     incsp2
	jmp     incsp1
;
; printf ("Dbg: Loading overlay %u from memory\n", num);
;
	.dbg	line, "multidemo.c", 179
L0082:	jsr     decsp8
	lda     #<(L00A4)
	ldx     #>(L00A4)
	jsr     pushax
	ldy     #$0A
	lda     (sp),y
	jsr     pusha0
	ldy     #$04
	jsr     _printf
;
; copyinfo.offs  = 0;
;
	.dbg	line, "multidemo.c", 180
	lda     #$00
	ldy     #$02
	sta     (sp),y
;
; copyinfo.page  = overlay[num - 1].page;
;
	.dbg	line, "multidemo.c", 181
	ldy     #$08
	tax
	lda     (sp),y
	sec
	sbc     #$01
	bcs     L00AC
	dex
L00AC:	stx     tmp1
	asl     a
	rol     tmp1
	asl     a
	rol     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_overlay)
	sta     ptr1
	lda     tmp1
	adc     #>(_overlay)
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	iny
	jsr     staxysp
;
; copyinfo.buf   = overlay[num - 1].addr;
;
	.dbg	line, "multidemo.c", 182
	ldy     #$08
	ldx     #$00
	lda     (sp),y
	sec
	sbc     #$01
	bcs     L00B0
	dex
L00B0:	stx     tmp1
	asl     a
	rol     tmp1
	asl     a
	rol     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_overlay)
	sta     ptr1
	lda     tmp1
	adc     #>(_overlay)
	sta     ptr1+1
	ldy     #$05
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     stax0sp
;
; copyinfo.count = overlay[num - 1].size;
;
	.dbg	line, "multidemo.c", 183
	ldy     #$08
	ldx     #$00
	lda     (sp),y
	sec
	sbc     #$01
	bcs     L00B4
	dex
L00B4:	stx     tmp1
	asl     a
	rol     tmp1
	asl     a
	rol     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_overlay)
	sta     ptr1
	lda     tmp1
	adc     #>(_overlay)
	sta     ptr1+1
	dey
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	dey
	jsr     staxysp
;
; em_copyfrom (&copyinfo);
;
	.dbg	line, "multidemo.c", 184
	lda     sp
	ldx     sp+1
	jsr     _em_copyfrom
;
; return 1;
;
	.dbg	line, "multidemo.c", 185
	ldx     #$00
	lda     #$01
	jsr     incsp8
;
; }
;
	.dbg	line, "multidemo.c", 187
	jmp     incsp1
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ copyoverlays (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_copyoverlays: near

	.dbg	func, "copyoverlays", "00", extern, "_copyoverlays"
	.dbg	sym, "page", "00", auto, -2
	.dbg	sym, "num", "00", auto, -3

.segment	"CODE"

;
; unsigned page = 0;
;
	.dbg	line, "multidemo.c", 192
	jsr     push0
;
; for (num = 0; num < sizeof (overlay) / sizeof (overlay[0]); ++num) {
;
	.dbg	line, "multidemo.c", 195
	jsr     decsp1
	ldy     #$00
L0121:	sta     (sp),y
	cmp     #$03
	bcc     L0124
;
; }
;
	.dbg	line, "multidemo.c", 219
	jmp     incsp3
;
; unsigned size = (overlay[num].size + EM_PAGE_SIZE - 1) / EM_PAGE_SIZE;
;
	.dbg	line, "multidemo.c", 197
L0124:	jsr     decsp8
	ldy     #$08
	ldx     #$00
	lda     (sp),y
	stx     tmp1
	asl     a
	rol     tmp1
	asl     a
	rol     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_overlay)
	sta     ptr1
	lda     tmp1
	adc     #>(_overlay)
	sta     ptr1+1
	dey
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	inx
	sec
	sbc     #$01
	bcs     L00C8
	dex
L00C8:	txa
	jsr     pusha0
;
; if (size > em_pagecount () - page) {
;
	.dbg	line, "multidemo.c", 199
	jsr     pushw0sp
	jsr     _em_pagecount
	sec
	ldy     #$0D
	sbc     (sp),y
	pha
	txa
	iny
	sbc     (sp),y
	tax
	pla
	jsr     tosicmp
	bcc     L00C9
	beq     L00C9
;
; printf ("Dbg: Not enough memory for overlay %u\n", num + 1);
;
	.dbg	line, "multidemo.c", 200
	lda     #<(L00CC)
	ldx     #>(L00CC)
	jsr     pushax
	ldy     #$0C
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$01
	bcc     L00CF
	inx
L00CF:	jsr     pushax
	ldy     #$04
;
; continue;
;
	.dbg	line, "multidemo.c", 201
	jmp     L0123
;
; if (loadoverlay (num + 1) == 0)
;
	.dbg	line, "multidemo.c", 204
L00C9:	ldy     #$0A
	lda     (sp),y
	clc
	adc     #$01
	jsr     _loadoverlay
	cmp     #$00
;
; continue;
;
	.dbg	line, "multidemo.c", 205
	jeq     L0122
;
; copyinfo.offs  = 0;
;
	.dbg	line, "multidemo.c", 207
	lda     #$00
	ldy     #$04
	sta     (sp),y
;
; copyinfo.page  = page;
;
	.dbg	line, "multidemo.c", 208
	ldy     #$0C
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$05
	jsr     staxysp
;
; copyinfo.buf   = overlay[num].addr;
;
	.dbg	line, "multidemo.c", 209
	ldy     #$0A
	ldx     #$00
	lda     (sp),y
	stx     tmp1
	asl     a
	rol     tmp1
	asl     a
	rol     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_overlay)
	sta     ptr1
	lda     tmp1
	adc     #>(_overlay)
	sta     ptr1+1
	ldy     #$05
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	ldy     #$02
	jsr     staxysp
;
; copyinfo.count = overlay[num].size;
;
	.dbg	line, "multidemo.c", 210
	ldy     #$0A
	ldx     #$00
	lda     (sp),y
	stx     tmp1
	asl     a
	rol     tmp1
	asl     a
	rol     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_overlay)
	sta     ptr1
	lda     tmp1
	adc     #>(_overlay)
	sta     ptr1+1
	ldy     #$07
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	iny
	jsr     staxysp
;
; em_copyto (&copyinfo);
;
	.dbg	line, "multidemo.c", 211
	lda     sp
	ldx     sp+1
	clc
	adc     #$02
	bcc     L00E0
	inx
L00E0:	jsr     _em_copyto
;
; overlay[num].page = page;
;
	.dbg	line, "multidemo.c", 213
	ldy     #$0A
	ldx     #$00
	lda     (sp),y
	stx     tmp1
	asl     a
	rol     tmp1
	asl     a
	rol     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_overlay)
	sta     ptr1
	lda     tmp1
	adc     #>(_overlay)
	sta     ptr1+1
	ldy     #$0C
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$02
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; page += size;
;
	.dbg	line, "multidemo.c", 214
	ldy     #$00
	lda     (sp),y
	ldy     #$0B
	clc
	adc     (sp),y
	sta     (sp),y
	ldy     #$01
	lda     (sp),y
	ldy     #$0C
	adc     (sp),y
	sta     (sp),y
;
; printf ("Dbg: Stored overlay %u in pages %u-%u\n",
;
	.dbg	line, "multidemo.c", 216
	lda     #<(L00E7)
	ldx     #>(L00E7)
	jsr     pushax
;
; num + 1, overlay[num].page, page - 1);
;
	.dbg	line, "multidemo.c", 217
	ldy     #$0C
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$01
	bcc     L00EA
	inx
L00EA:	jsr     pushax
	ldy     #$0E
	ldx     #$00
	lda     (sp),y
	stx     tmp1
	asl     a
	rol     tmp1
	asl     a
	rol     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_overlay)
	sta     ptr1
	lda     tmp1
	adc     #>(_overlay)
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldy     #$12
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sec
	sbc     #$01
	bcs     L00EE
	dex
L00EE:	jsr     pushax
	ldy     #$08
L0123:	jsr     _printf
;
; }
;
	.dbg	line, "multidemo.c", 218
L0122:	ldy     #$0A
	jsr     addysp
;
; for (num = 0; num < sizeof (overlay) / sizeof (overlay[0]); ++num) {
;
	.dbg	line, "multidemo.c", 195
	ldy     #$00
	clc
	lda     #$01
	adc     (sp),y
	jmp     L0121
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

	.dbg	func, "main", "00", extern, "_main"

.segment	"CODE"

;
; log ("Loading extended memory driver");
;
	.dbg	line, "multidemo.c", 224
	lda     #<(L00F1)
	ldx     #>(L00F1)
	jsr     _log
;
; if (loademdriver ()) {
;
	.dbg	line, "multidemo.c", 225
	jsr     _loademdriver
	tax
	beq     L00F3
;
; log ("Copying overlays into ext. memory");
;
	.dbg	line, "multidemo.c", 226
	lda     #<(L00F6)
	ldx     #>(L00F6)
	jsr     _log
;
; copyoverlays ();
;
	.dbg	line, "multidemo.c", 227
	jsr     _copyoverlays
;
; } else {
;
	.dbg	line, "multidemo.c", 228
	jmp     L00F9
;
; log ("No extended memory driver found");
;
	.dbg	line, "multidemo.c", 229
L00F3:	lda     #<(L00FB)
	ldx     #>(L00FB)
	jsr     _log
;
; log ("Press any key...");
;
	.dbg	line, "multidemo.c", 232
L00F9:	lda     #<(L00FE)
	ldx     #>(L00FE)
	jsr     _log
;
; getchar ();
;
	.dbg	line, "multidemo.c", 233
	jsr     _getchar
;
; if (loadoverlay (1)) {
;
	.dbg	line, "multidemo.c", 235
	lda     #$01
	jsr     _loadoverlay
	tax
	beq     L0101
;
; log ("Calling overlay 1 from main");
;
	.dbg	line, "multidemo.c", 236
	lda     #<(L0105)
	ldx     #>(L0105)
	jsr     _log
;
; foo ();
;
	.dbg	line, "multidemo.c", 242
	jsr     _foo
;
; if (loadoverlay (2)) {
;
	.dbg	line, "multidemo.c", 248
L0101:	lda     #$02
	jsr     _loadoverlay
	tax
	beq     L0108
;
; log ("Calling overlay 2 from main");
;
	.dbg	line, "multidemo.c", 249
	lda     #<(L010C)
	ldx     #>(L010C)
	jsr     _log
;
; bar ();
;
	.dbg	line, "multidemo.c", 250
	jsr     _bar
;
; if (loadoverlay (3)) {
;
	.dbg	line, "multidemo.c", 253
L0108:	lda     #$03
	jsr     _loadoverlay
	tax
	beq     L010F
;
; log ("Calling overlay 3 from main");
;
	.dbg	line, "multidemo.c", 254
	lda     #<(L0113)
	ldx     #>(L0113)
	jsr     _log
;
; foobar ();
;
	.dbg	line, "multidemo.c", 255
	jsr     _foobar
;
; if (doesclrscrafterexit ()) {
;
	.dbg	line, "multidemo.c", 258
L010F:	jsr     _doesclrscrafterexit
	tax
	beq     L0116
;
; log ("Press any key...");
;
	.dbg	line, "multidemo.c", 259
	lda     #<(L0119)
	ldx     #>(L0119)
	jsr     _log
;
; getchar ();
;
	.dbg	line, "multidemo.c", 260
	jmp     _getchar
;
; }
;
	.dbg	line, "multidemo.c", 262
L0116:	rts
	.dbg	line

.endproc

